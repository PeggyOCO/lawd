<?php/** * @file * A module file for providing functionality to replace files on upload * Typical Drupal behavior is to rename files on upload to <filename>_0.<ext> * This module modifies that behavior. * * 1.0 - Behavior is as follows: when a user is replacing a file (remove and save). *   if the file to be removed is <filename>.<ext> and the file to be saved is *   <filename>_<[0-9]+>.<ext> then the file will be removed and the new file will *   be renamed to <filename>.<ext> *//** * Implements hook_file_update(). */function upload_replace_file_update($new_file) {  if (!$new_file->fid) {    // Nothing to do if no file id.    return;  }  // Check scheme to not interfere with external files.  $scheme = file_uri_scheme($new_file->uri);  if (!($scheme == 'public' || $scheme == 'private')) {    // Return if $scheme is not (public or private)    // then it is some other scheme like youtube or s3 etc.    return;  }  $desired_destination = preg_replace('/_[0-9]+\.(.*)$/', '.$1', $new_file->uri);  $db_path = db_select('file_managed', 'f')    ->fields('f', array('uri'))    ->condition('fid', $new_file->fid)    ->execute()    ->fetchAssoc();  if ($db_path['uri'] != $new_file->uri) {    // This happens when a reversion is being reverted.    $next_good_uri = file_destination($desired_destination, FILE_EXISTS_RENAME);    db_update('file_managed')      ->fields(array('uri' => $next_good_uri))      ->condition('fid', $new_file->fid)      ->execute();    $new_file->uri = $desired_destination;  }  else {    // If the filename has be modified by adding a _0 value, or on certain    // situations the uri will not match the uri in the db, such as when    // reverting a revision. When reverting a revision change the filename as    // well.    if (!strpos($new_file->uri, $new_file->filename)) {      $is_blocked = FALSE;      $blocking_file = NULL;      $tmp_destination = '';      // The filename is not in the uri, so drupal must have added a "_0" before      // the extension. Find the file that is blocking this file from keeping      // the correct path.      $result = db_select('file_managed', 'f')        ->fields('f')        ->condition('uri', $desired_destination)        ->execute();      // @todo Only one result is handled, should allow for multiple results.      foreach ($result as $file) {        $is_blocked = TRUE;        $blocking_file = $file;        $tmp_destination = file_directory_temp() . "/test_-" . $blocking_file->fid . "_-" . $blocking_file->filename;      }      $old_destination = $db_path['uri'];      $t_message = 'The file %old could not be moved to %new';      // Swap the files.      if ($is_blocked) {        // Move the blocking file to a temporary location.        if (!file_unmanaged_move($desired_destination, $tmp_destination)) {          drupal_set_message(t($t_message, array('%old' => $desired_destination, '%new' => $tmp_destination)), 'error');          return;        }        // Move blocking file was successful, update the DB        db_update('file_managed')          ->fields(array('uri' => $tmp_destination))          ->condition('fid', $blocking_file->fid)          ->execute();      }      // Move the new file to the preferred location      if (!file_unmanaged_move($old_destination, $desired_destination)) {        drupal_set_message(t($t_message, array('%old' => $old_destination, '%new' => $desired_destination)), 'error');        return;      }      // Move new file was successful, update the DB      db_update('file_managed')        ->fields(array('uri' => $desired_destination))        ->condition('fid', $new_file->fid)        ->execute();      // Set the new file's path to the correct path      $new_file->uri = $desired_destination;      if ($is_blocked) {        // Move the older file from temp to the new _X location        if (!file_unmanaged_move($tmp_destination, $old_destination)) {          drupal_set_message(t($t_message, array('%old' => $tmp_destination, '%new' => $old_destination)), 'error');          return;        }        // Move blocking file was successful, update the DB with the actual location after file copy,        // so we use tmp_destination as it was updated during the move        db_update('file_managed')          ->fields(array('uri' => $old_destination))          ->condition('fid', $blocking_file->fid)          ->execute();      }    }  }  //Have to clear the cache because the revision data is cached somewhere  $query = "SELECT DISTINCT uri FROM {file_managed} WHERE fid=:fid";  $uri = db_query($query, array(':fid' => $new_file->fid))->fetchField();  image_path_flush($uri);  /*  * Find the nids where this file is used  $query = "SELECT DISTINCT nid FROM {files} WHERE fid=%d";  $result = db_query($query, $new_file->fid);  while($data = db_fetch_object($result)) {  cache_clear_all("content:$data->nid");  }  */  //This is inefficent, but how can we determine what nodes use this file?  // cache_clear_all('*', 'cache_content', TRUE);}/** * Implements hook_file_delete(). * * Update the uri in the file object before deleting as we may have altered it above. */function upload_replace_file_delete($file) {  $file->uri = db_select('file_managed', 'f')    ->fields('f', array('uri'))    ->condition('f.fid', $file->fid)    ->execute()    ->fetchField();}